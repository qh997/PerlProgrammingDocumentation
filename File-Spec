NAME
    File::Spec - 可移植的文件名操作。

DESCRIPTION
    该模块被设计用来支持操作常用的文件规范（通常称为“文件名“，但是不要与文件内容和 Perl 的文件句柄想混淆）。
    由于这些功能对于大多数操作系统是不同的，所以每个OS特定程序组都提供在一个单独的模块，包括：
        File::Spec::Unix
        File::Spec::Mac
        File::Spec::OS2
        File::Spec::Win32
        File::Spec::VMS
    适用于当前操作系统的模块将由 File::Spec 自动加载。由于一些模块仅仅利用该 OS 上的可用功能，所以它可能不会在所有的操作系统中加载的所有模块。

    因为 File::Spec 是面向对象的，所以不应直接调用子程序。比如：
        File::Spec::catfile('a','b');
    而应将其作为类方法：
        File::Spec->catfile('a','b');

    对于简单的应用，File::Spec::Functions 提供了这项方法的方便的函数形式。

METHODS
    canonpath

    catdir
        连接两个或两个以上的目录名，以形成一个完整的路径，并以一个目录结束。但它将删除字符串中结尾的斜线，因为这看起来并不好，也没必要，并且会混淆 OS/2。当然，若这是根目录，则不会删除:-)
            $path = File::Spec->catdir(@directories);

    catfile
        连接一个或多个目录名以及一个文件名，以形成一个完整的路径，并以一个文件名结束。
            $path = File::Spec->catfile(@directories, $filename);

    curdir
        返回一个表示当前目录的字符串。
            $curdir = File::Spec->curdir();

    devnull
        返回一个表示 null 设备的字符串。
            $devnull = File::Spec->devnull();

    rootdir
        返回一个表示根目录的字符串。
            $rootdir = File::Spec->rootdir();

    tmpdir
        返回一个从临时目录列表中找到的第一个可写的临时目录的字符串。如果没有找到任何可写的临时目录，将返回但前目录。临时目录列表依赖于平台，例如 File::Spec::Unix 将查找 $ENV{TMPDIR}（taint 模式关闭）和 /tmp。
            $tmpdir = File::Spec->tmpdir();

    updir
        返回一个表示父级目录的字符串。
            $updir = File::Spec->updir();

    no_upwards

    case_tolerant
        返回 true 或 false 分别表示在比较文件规范时字母大小写是否有意义。
            $is_case_tolerant = File::Spec->case_tolerant();

    file_name_is_absolute
        将参数作为一个路径，如果该路径是绝对路径则返回 true。
            $is_absolute = File::Spec->file_name_is_absolute($path);
        在 Unix, Win32, OS/2, 或 Mac OS（Classic）上，不会参考本地文件系统。但在 VMS 中会参考工作环境。

    path
        无参数。以列表形式返回环境变量 PATH（或本地平台等效物）。
            @PATH = File::Spec->path();

    join
        与 catfile 一样。

    splitpath
        将一个路径分割为卷名、目录和文件名。如果系统没有卷的概念，则返回''作为卷名。
            ($volume,$directories,$file) =
                       File::Spec->splitpath($path);
            ($volume,$directories,$file) =
                       File::Spec->splitpath($path, $no_file);
        因为系统在目录与文件名之间没有语法差异，所以将假设最后文件路径，除非 $no_file 为 true，或以分割符结尾，或存在 /. 和 /..。在 Unix中，这意味着 $no_file 为 true将会返回（'', $path, ''）。
        目录末尾部分可能会也可能不会返回'/'。
        该结果可以传递给 catpath() 用来得到一个相当于原路径的路径（通常是相同的）。

    splitdir
        catdir 的反操作。
            @dirs = File::Spec->splitdir($directories);
        
